// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum Show {
  MORNING
  MATINEE
  EVENING
  NIGHT
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  PENDING
  REFUNDED
}

enum BookingSource {
  LOCAL
  BMS
  VIP
  ONLINE
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  BLOCKED
  BMS_BOOKED
  SELECTED
}

// Models
model Booking {
  id            String        @id @default(uuid())
  date          DateTime
  show          Show
  screen        String
  movie         String
  movieLanguage String        @default("HINDI")
  
  // Seat information
  bookedSeats   Json          // Array of seat IDs like ["A1", "A2", "B3"]
  seatCount     Int           // Number of seats booked
  classLabel    String        // e.g., "BOX", "STAR CLASS"
  
  // Pricing
  pricePerSeat  Int
  totalPrice    Int
  
  // Booking metadata
  status        BookingStatus @default(CONFIRMED)
  source        BookingSource @default(LOCAL)
  synced        Boolean       @default(false)
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bookedAt      DateTime      @default(now())
  
  // Optional fields for future use
  customerName  String?
  customerPhone String?
  customerEmail String?
  notes         String?
  
  // Income tracking (for future use)
  totalIncome   Int?          @default(0)
  localIncome   Int?          @default(0)
  bmsIncome     Int?          @default(0)
  vipIncome     Int?          @default(0)
  
  // Relations
  seats Seat[]
  
  // Indexes for better performance
  @@index([date, show])
  @@index([status])
  @@index([source])
  @@index([classLabel])
  @@index([createdAt])
  
  // Unique constraint to prevent duplicate bookings for the same seats on the same date and show
  @@unique([date, show, bookedSeats])
}

// Seat tracking model for real-time seat status
model Seat {
  id        String     @id @default(uuid())
  seatId    String     @unique // e.g., "A1", "B3"
  row       String     // e.g., "A", "B"
  number    Int        // e.g., 1, 3
  classLabel String    // e.g., "BOX", "STAR CLASS"
  status    SeatStatus @default(AVAILABLE)
  
  // Booking reference (if booked)
  bookingId String?
  booking   Booking?   @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Indexes
  @@index([seatId])
  @@index([row, number])
  @@index([classLabel])
  @@index([bookingId])
}

// BMS Booking model for show-specific BMS seat tracking
model BmsBooking {
  id        String   @id @default(uuid())
  seatId    String   // e.g., "BOX-A1", "SC-B2"
  date      DateTime
  show      Show
  classLabel String   // e.g., "BOX", "STAR CLASS"
  status    SeatStatus @default(BMS_BOOKED)
  
  // Timestamps
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Indexes
  @@index([seatId])
  @@index([date, show])
  @@index([classLabel])
  @@index([status])
  
  // Unique constraint to prevent duplicate BMS bookings for the same seat on the same date and show
  @@unique([seatId, date, show])
}

// Movie configuration model
model Movie {
  id          String   @id @default(uuid())
  name        String   @unique
  language    String   @default("HINDI")
  screen      String   @default("Screen 1")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Indexes
  @@index([name])
  @@index([isActive])
}

// Pricing configuration model
model PricingConfig {
  id         String   @id @default(uuid())
  classLabel String   @unique // e.g., "BOX", "STAR CLASS"
  price      Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Indexes
  @@index([classLabel])
  @@index([isActive])
}

